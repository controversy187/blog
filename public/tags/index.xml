<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Brett Fitzgerald</title>
    <link>https://brettgfitzgerald.com/</link>
    <description>Recent content on Brett Fitzgerald</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    
    <atom:link href="https://brettgfitzgerald.com/tags/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cursor AI: Rediscovering the Joy of Code (A PM&#39;s Journey)</title>
      <link>https://brettgfitzgerald.com/posts/delving-into-cursor/</link>
      <pubDate>Tue, 13 May 2025 00:00:00 -0500</pubDate>
      <guid>https://brettgfitzgerald.com/posts/delving-into-cursor/</guid>
      <description>&lt;h2 id=&#34;delving-into-cursor&#34;&gt;Delving into Cursor&lt;/h2&gt;
&lt;p&gt;Ok, I&amp;rsquo;m late to the game. I just started using &lt;a href=&#34;https://cursor.sh&#34;&gt;Cursor&lt;/a&gt; to write code. To be fair, writing code isn&amp;rsquo;t really part of my day-to-day job as a Product Manager for an advanced data analytics team, but I wanted to scratch that &amp;ldquo;builder&amp;rdquo; itch in me. Also, I wanted better data than what is available through Jira&amp;rsquo;s API. That means I need to write some code, probably in Python since that&amp;rsquo;s my jam. And why not use these AI tools that everyone else is using? But which one(s) should I use?&lt;/p&gt;
&lt;h2 id=&#34;cursor-vs-windsurf-vs-gemini-code-assist-vs-others&#34;&gt;Cursor vs. Windsurf vs. Gemini Code Assist vs. Others&lt;/h2&gt;
&lt;p&gt;Cursor. Why? No reason. Gotta start somewhere, and that&amp;rsquo;s what the kids are talking about.&lt;/p&gt;
&lt;h2 id=&#34;getting-set-up&#34;&gt;Getting set up&lt;/h2&gt;
&lt;p&gt;Super simple to get Cursor running. Create an account, download the software, and go. Up and running. It looks very familiar (I guess it&amp;rsquo;s a fork of VSCode, which itself resembles Sublime Text, etc.). There&amp;rsquo;s a file browser in the left sidebar, and primary tabbed coding window. In Cursor, though, there&amp;rsquo;s a chatbox on the right that connects to their AI agent. After signup, you&amp;rsquo;re given two weeks of their Pro version for free. I honestly don&amp;rsquo;t know what their free version includes. That was really hard to determine on their website. Full disclosure, I still don&amp;rsquo;t know. Regardless, that&amp;rsquo;s about all you need to get setup.&lt;/p&gt;
&lt;h2 id=&#34;first-steps&#34;&gt;First steps&lt;/h2&gt;
&lt;p&gt;Not knowing where to start, I typed in the description of the application I wanted to build. I&amp;rsquo;ve worked with LLMs enough to know to ask if it has any questions for me before it starts doing anything. Sure enough, it asked about technologies to use, and some basic structure questions. Once I answered those, it started writing my code for me! It proposed several files and I blindly accepted the proposals. In short order, I had a basic application running!&lt;/p&gt;
&lt;h2 id=&#34;iterating&#34;&gt;Iterating&lt;/h2&gt;
&lt;p&gt;The app itself wasn&amp;rsquo;t worth using yet. Several things were non-functional or looked terrible, but I started to correct the issues one at a time. Through this entire process, I didn&amp;rsquo;t write any code. I simply described the change I wanted to make, and Cursor made a suggestion. I accepted it, and tested the results, going back and forth with the agent. I hear a lot about Cursor&amp;rsquo;s superpower: Tab completion. Describe something, hit Tab, and Cursor fills in the rest. I still haven&amp;rsquo;t used that. The Agentic build is doing everything I ask of it.&lt;/p&gt;
&lt;h2 id=&#34;limitations&#34;&gt;Limitations&lt;/h2&gt;
&lt;p&gt;Eventually, my conversation started losing context. A little note at the bottom of the chat window informed me that starting a new chat will yield better results. But would Cursor pick up where it left off? It turned out, no. A new chat was a new chat. It had the context of the codebase, but only the details of the files that I specifically mentioned. This floundering and context-loss made me realize I needed a better way to guide Cursor, which led me to&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;a-project-plan&#34;&gt;A Project Plan&lt;/h2&gt;
&lt;p&gt;As a recovering Agilist, I don&amp;rsquo;t like having a plan. I like to just build things. But a plan gives a person a larger context for what their work does, where it leads, and what it fits into. And that&amp;rsquo;s just what a coding agent needs. So I stopped building for a bit, then told Cursor what my project goals are, and asked it to create a markdown file describing the project, building a checklist of incremental steps we would need to accomplish the project. It happily complied! From that point on, as we accomplished tasks, we checked them off, started a new chat, and picked up right where we left off. Tagging the project plan and the relevant files in a new chat very quickly reacclimated Cursor to what we were doing.&lt;/p&gt;
&lt;p&gt;More recently, as features that I&amp;rsquo;m building into this application are more sizeable, I&amp;rsquo;m creating Feature plans in addition to the Project plan. So I can give Cursor the overall context of the project, then give it the more granular context of the feature we&amp;rsquo;re building. Keeping these agentic chats small seems to keep them more intellegent.&lt;/p&gt;
&lt;h2 id=&#34;bug-loops&#34;&gt;Bug loops&lt;/h2&gt;
&lt;p&gt;I did stumble on some long loops a bug being introduced, then three or four steps of remediation, then it reintroduced the same bug again. As a concise example, I&amp;rsquo;m new to Big Query and was asking for Cursor to store and update some Big Query records.&lt;/p&gt;
&lt;p&gt;Me: Grab the data from the API and update the table in BQ with it.
Cursor: Sure, here&amp;rsquo;s the code.
Me: I ran it and it&amp;rsquo;s adding every record as a new record. I want to update the existing records, and add any new ones. Think &amp;ldquo;Upsert&amp;rdquo;.
Cursor: Got it. Here&amp;rsquo;s the new code that adds new records and updates existing ones.
Me: I ran that, and now Big Query is complaining about not updating a streaming buffer.
Cursor: That makes sense. The streaming buffer hasn&amp;rsquo;t finished writing to the table from our last operation, so you can&amp;rsquo;t update those records. I&amp;rsquo;ll refactor the code to accommodate this by creating new rows for each record we get back from the API
Me: No, that&amp;rsquo;s where we started!&lt;/p&gt;
&lt;p&gt;In order to break out of some of these loops, I had to do some learning (from a co-worker) and learned about Merging records. I mentioned that to Cursor, and it quickly leveraged that method to accomodate the streaming buffers.&lt;/p&gt;
&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;I described this to my wife. I like building things and solving problems. I used to write code for a living, but I have a horrible memory. I knew &lt;em&gt;how&lt;/em&gt; I wanted to solve a problem, but I spent so much time looking up coding references, examples, or debugging things that seemed pretty far into the weeds. Solving the problems was fun, but writing the code was more of a tedius hoop I had to jump through. Heaven forbid I had to go back through someone else&amp;rsquo;s code to try and discover what they were attempting to do!&lt;/p&gt;
&lt;p&gt;Cursor has reignited my joy in coding. I am focused on building and solving problems, not remembering syntax and keeping a complex process flow in my active memory. I can delegate the detailed parts to an AI agent who is, frankly, better at keeping them straight. I&amp;rsquo;m learning how to interact with the agent in a way that we both meet with success. Small steps, incremental value delivery. Tight feedback loops. It&amp;rsquo;s all that agile stuff. But the fundamental agile stuff, not the meetings, roles, process, and Agile-Industry.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s fun.&lt;/p&gt;
&lt;p&gt;After my two week free Pro trial, the Agent chat just threw errors at me. It said I should try again later, but I never got it to work. I did end up paying the $20 / month for the paid pro version so that I could continue building my application. Frankly, I&amp;rsquo;m getting excited again about building more things. Ideas keep coming like they used to. When I was new to programming and I naively felt like I could build anything with a handful of for loops and if statements. The feeling of ability seemed to unlock so many ideas. Now I&amp;rsquo;m feeling that excitement again. Is Cursor (and agentic programming in general) perfect? Nope! But it&amp;rsquo;s really good, and it&amp;rsquo;s going to get better!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Obsidian, MCP Servers, and Supercharging Your Second Brain with AI</title>
      <link>https://brettgfitzgerald.com/posts/mcp-server-experiences/</link>
      <pubDate>Wed, 02 Apr 2025 00:00:00 -0500</pubDate>
      <guid>https://brettgfitzgerald.com/posts/mcp-server-experiences/</guid>
      <description>&lt;h2 id=&#34;my-journey-with-mcp-servers&#34;&gt;My Journey with MCP Servers&lt;/h2&gt;
&lt;p&gt;I recently learned of MCP (Model Control Protocol) servers through a &lt;a href=&#34;https://news.ycombinator.com/item?id=43410866&#34;&gt;post on Hacker News&lt;/a&gt;. The premise seems really neat. MCP is essentially a protocol that allows AI models like Claude to interact with external tools and services through a standardized interface. I can write a very simple server and create &amp;ldquo;tools&amp;rdquo; for the Claude.ai desktop application to connect to and use. The example in the post created some tools that gave Claude access to read and write to the local filesystem (unrestricted, by the way). The original intent was to have Claude write some application. I cloned and ran the &lt;a href=&#34;https://github.com/ZbigniewTomanek/my-mcp-server&#34;&gt;sample MCP server&lt;/a&gt; from the article to play with it, and was immediately impressed. This unlocks so many opportunities to integrate an LLM with countless services!&lt;/p&gt;
&lt;p&gt;Hold on to that thought&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;my-second-brain&#34;&gt;My Second Brain&lt;/h2&gt;
&lt;p&gt;For the past several years, I&amp;rsquo;ve been using Tiago Forte&amp;rsquo;s &lt;a href=&#34;https://www.buildingasecondbrain.com/&#34;&gt;Build a Second Brain&lt;/a&gt; method using Obsidian.md for my second brain. I implemented the &lt;a href=&#34;https://fortelabs.com/blog/para/&#34;&gt;PARA Method&lt;/a&gt; for organization, and create a Daily Note every day to link my chronological life to my disorganized brain. It&amp;rsquo;s been a good system, even if I don&amp;rsquo;t use it to it&amp;rsquo;s fullest. At the very least, I have all my notes synced with me between my desktop, laptop, and phone, thanks to Syncthing. That being said, Obsidian&amp;rsquo;s search capabilities are relatively lackluster.&lt;/p&gt;
&lt;p&gt;This is where my MCP server can help.&lt;/p&gt;
&lt;h2 id=&#34;getting-things-going&#34;&gt;Getting things going&lt;/h2&gt;
&lt;p&gt;To get it all setup, I basically cloned the MCP server linked above, and then set it up as they described, creating the server config in the Claude Desktop app. Since I&amp;rsquo;m running Linux, I had to &lt;a href=&#34;https://github.com/aaddrick/claude-desktop-debian&#34;&gt;hack around a bit&lt;/a&gt; to get the Windows Claude client running, but it works fine. With the MCP server connected, I now showed that I had several tools available to Claude.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Available Tools&#34; loading=&#34;lazy&#34; src=&#34;https://brettgfitzgerald.com/posts/mcp-server-experiences/available-tools.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;After some sample queries, I validated that Claude now had full access to my filesystem!&lt;/p&gt;
&lt;h2 id=&#34;plumbing-the-depths-of-my-second-brain&#34;&gt;Plumbing the depths of my second brain&amp;hellip;&lt;/h2&gt;
&lt;p&gt;Since I write a Daily Note every day, I first asked Claude to summarize my daily notes for the month of March 2025. It came up with accurate and surprisingly detailed insights.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;March 2025 Daily Notes Summary
Personal Life
Family Activities:

Started the month at ****** with the ****** and ****** families, though you noted it was chaotic with misaligned schedules
Went skiing with ****** at Crystal Mountain on March 10th, where you had a meaningful father-son conversation about life and relationships
Your daughter ****** attended Middle School Ministry several times
References to your family (******, ******, ******, ******) appear consistently throughout the month

Fitness:

Maintained consistent workout schedule with 15 recorded workout days
Primarily practiced Jiu-Jitsu at ****** (both gi and nogi classes)
Also incorporated running into your fitness routine
Tracked your weight throughout the month, ranging from 179 lbs to 187 lbs, with an average around 182 lbs

Spiritual Practice:

Maintained daily quiet time starting mid-month (March 18-31)
Studied the Gospel of Matthew, progressing sequentially from Matthew 12:38 through Matthew 14:33
Each quiet time session appears well-documented with dedicated notes

Professional Life
Regular Meetings:

****** (almost daily)
Weekly kickoff meetings (Mondays)
One-on-one meetings with various team members including ******, ******, and ******

Key Projects:

****** Rush Orders project with weekly check-ins
****** project with multiple coordination meetings
Corporate Injury Analysis work
Supply Chain ****** activities and meetings
Non******stock ETA modeling work (created ******)

Professional Development:

Participated in Looker Studio training for data visualization
Worked on Google Maps Optimization POC
Set up Gemini in VSCode
Explored Jira metrics via API

People Management:

Reached out to ****** about a ******
Provided feedback on ******&amp;#39;s Flow Metrics presentation
Worked with various team members including ******, ******, ******, and ******

Your month shows a balanced life with consistent attention to physical fitness, spiritual growth, family time, and professional responsibilities, with a particular focus on data and supply chain projects at work.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This was great! For years, my Second Brain has been a storage device. I had the ability to go back and manually retrieve that information, but I had to read the notes into my short-term (actual) brain, and hold it there while I search for other information to connect it to. Obsidian and the Second Brain method make this simpler by encouraging the use of internal links in notes, but now I had another tool for synthesizing meaningful information from all these connections!&lt;/p&gt;
&lt;h3 id=&#34;creating-notes&#34;&gt;Creating Notes&lt;/h3&gt;
&lt;p&gt;Equipped with a tool for analyzing my second brain, I turned toward project management. I&amp;rsquo;ve had a few ideas for side projects that I wanted to flesh out a bit. I&amp;rsquo;ve worked with LLMs in the past to bounce ideas off and refine some thoughts, but now I could generate documentation around these ideas, store that information, and retrieve it later for ongoing processing and development! I took a conversation about a project I&amp;rsquo;m thinking through, described my desired goal, and then asked Claude to develop a plan for a low-code, low-cost MVP to test market fit. It described the approach, I refined it a bit, and then asked Claude to store the project documentation in my Obsidian Vault. Boom, project plan and action steps created!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Project Plan&#34; loading=&#34;lazy&#34; src=&#34;https://brettgfitzgerald.com/posts/mcp-server-experiences/project-plan.jpg&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;reflection&#34;&gt;Reflection&lt;/h3&gt;
&lt;p&gt;MCP Servers seem extremely powerful. For such a long time, LLMs have seemed contained to limited use cases. Plugins for code editors have allowed functionality in coding and chatbots are common. Further integrations have required the use of APIs and coding to leverage the power of LLMs in other contexts. Now, with MCP Servers, it really feels like we have simple-to-create interfaces that allow LLMs to interact with the rest of the digital world. What will you create?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Video Compression Analysis</title>
      <link>https://brettgfitzgerald.com/posts/video-compression-analysis/</link>
      <pubDate>Wed, 12 Feb 2025 05:00:00 -0500</pubDate>
      <guid>https://brettgfitzgerald.com/posts/video-compression-analysis/</guid>
      <description>&lt;h2 id=&#34;a-videography-hobbyist&#34;&gt;A videography hobbyist&lt;/h2&gt;
&lt;p&gt;In my free time, I like shooting videos of my family&amp;rsquo;s adventures and doing some basic editing. I shoot on my cellphone and a GoPro. For the past several years, I have rendered my final projects in 1080p at 24 frames per second. I liked the ability to shoot in 4k and still &amp;ldquo;zoom in&amp;rdquo; digitally to 1080. That also let me shoot slow motion video at 1080, and match my final render resolution. I recently got a newer GoPro, so now I can shoot 4k at 120 fps, which allows me slow down to 20% speed if I render my final project at 24 fps.&lt;/p&gt;
&lt;p&gt;With this advent of being able to shoot slow motion in 4k resolution, I decided to start rendering my projects in 4k, by default. I&amp;rsquo;m also experimenting with doing very quick edits, just splicing the day&amp;rsquo;s footage together, applying automatic color balancing per-clip, and then rendering at 60fps. This is more of a &amp;ldquo;home movie&amp;rdquo; of a day or event, rather than a curated, edited highlight video. I do all this in Davinci Resolve. Previously, I would be able to render my 1080 videos at 24fps and be happy with the file size and quality of picture. Now that I am rendering at four times the resolution and two and a half times the framerate, my output filesize has ballooned, and I need to pay better attention to my compression.&lt;/p&gt;
&lt;p&gt;I want to find a good balance between output filesize and quality for my home movies.&lt;/p&gt;
&lt;h2 id=&#34;comparison-of-projects&#34;&gt;Comparison of projects&lt;/h2&gt;
&lt;p&gt;In the past, I would shoot for around 100 megabytes per minute of rendered video. So a 5 minute video, rendered at a resolution of 1080, at 24 frames per second would come in around 500 MB. For videos I really spent time on, I would bump up my quality settings and I&amp;rsquo;d be happy with a 3 gig file for a 5 minute video.&lt;/p&gt;
&lt;p&gt;I recently rendered a video using Davinci Resolve&amp;rsquo;s 4k &amp;ldquo;Master&amp;rdquo; preset. So a resolution of 4k, at 60 frames per second, and a duration of 22 minutes came in at a whopping 75 gigabytes (~3.4 GB / min). I used Resolve&amp;rsquo;s &amp;ldquo;YouTube&amp;rdquo; preset, and that reduced the filesize to 1.8 GB.(~80 MB / min). That is a significant difference!&lt;/p&gt;
&lt;p&gt;For reference, my input files, shot on the GoPro Hero 13 were shot in 4k, mostly at 120 fps. They totaled 18.2GB, so my rendered file was actually four times larger than my source material!&lt;/p&gt;
&lt;p&gt;The two questions I have are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What is the difference in output files between these two?&lt;/li&gt;
&lt;li&gt;Is there a noticeable difference in visible quality?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;differences-in-objective-data&#34;&gt;Differences in objective data&lt;/h2&gt;
&lt;p&gt;I wrote a &lt;a href=&#34;https://gist.github.com/controversy187/0d33948ba3afeb5ba4c4d2fb9ae8113f&#34;&gt;python script&lt;/a&gt; that compares various aspects of the videos. I also ran them through the various presets in &lt;a href=&#34;https://handbrake.fr/&#34;&gt;Handbrake&lt;/a&gt; to see how they compare. The video is 21:49 long. These are the results of that comparison, in order of increasing filesize.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Filename&lt;/th&gt;
&lt;th&gt;Bitrate (kbps)&lt;/th&gt;
&lt;th&gt;Resolution&lt;/th&gt;
&lt;th&gt;Framerate (FPS)&lt;/th&gt;
&lt;th&gt;Video Codec&lt;/th&gt;
&lt;th&gt;Filesize&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Source Video (Sample).MP4&lt;/td&gt;
&lt;td&gt;120000&lt;/td&gt;
&lt;td&gt;3840x2160&lt;/td&gt;
&lt;td&gt;119.88&lt;/td&gt;
&lt;td&gt;hevc&lt;/td&gt;
&lt;td&gt;67 &lt;strong&gt;MB&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resolve - YouTube - h264.mp4&lt;/td&gt;
&lt;td&gt;11618&lt;/td&gt;
&lt;td&gt;3840x2160&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;h264&lt;/td&gt;
&lt;td&gt;1.8 GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resolve - YouTube - h265.mp4&lt;/td&gt;
&lt;td&gt;10566&lt;/td&gt;
&lt;td&gt;3840x2160&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;hevc&lt;/td&gt;
&lt;td&gt;1.7 GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resolve - Master - h264 - HandBrake - Fast.mp4&lt;/td&gt;
&lt;td&gt;37948&lt;/td&gt;
&lt;td&gt;3840x2160&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;hevc&lt;/td&gt;
&lt;td&gt;6 GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resolve - Master - h264 - HandBrake - VeryFast.mp4&lt;/td&gt;
&lt;td&gt;41025&lt;/td&gt;
&lt;td&gt;3840x2160&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;hevc&lt;/td&gt;
&lt;td&gt;6.5 GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resolve - Master - h264 - HandBrake - HQ.mp4&lt;/td&gt;
&lt;td&gt;57001&lt;/td&gt;
&lt;td&gt;3840x2160&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;hevc&lt;/td&gt;
&lt;td&gt;9 GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resolve - Master - h264 - HandBrake - Super HQ.mp4&lt;/td&gt;
&lt;td&gt;78210&lt;/td&gt;
&lt;td&gt;3840x2160&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;hevc&lt;/td&gt;
&lt;td&gt;12.5 GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resolve - Master - h265.mp4&lt;/td&gt;
&lt;td&gt;473927&lt;/td&gt;
&lt;td&gt;3840x2160&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;h264&lt;/td&gt;
&lt;td&gt;75.7 GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resolve - Master - h264.mp4&lt;/td&gt;
&lt;td&gt;474208&lt;/td&gt;
&lt;td&gt;3840x2160&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;h264&lt;/td&gt;
&lt;td&gt;75.8 GB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Obviously, Handbrake is going a good job at compressing the video, and lowering the bitrate, thus reducing filesize. But how do the videos actually &lt;em&gt;look&lt;/em&gt;?&lt;/p&gt;
&lt;h2 id=&#34;subjective-comparison&#34;&gt;Subjective comparison&lt;/h2&gt;
&lt;p&gt;Here are images captured from each of the above videos.&lt;/p&gt;
&lt;div id=&#34;gallery&#34;&gt;
  &lt;a href=&#34;images/Resolve - YouTube - h264.jpg&#34; data-sub-html=&#34;Davinci Resolve, YouTube preset, h264&#34;&gt;
  	&lt;img src=&#34;images/Resolve - YouTube - h264.jpg&#34; width=&#34;100%&#34;&gt;
  	Davinci Resolve, YouTube preset, h264
  &lt;/a&gt;
  &lt;a href=&#34;images/Resolve - YouTube - h265.jpg&#34; data-sub-html=&#34;Davinci Resolve, YouTube preset, h265&#34;&gt;
  	&lt;img src=&#34;images/Resolve - YouTube - h265.jpg&#34; width=&#34;100%&#34;&gt;
  	Davinci Resolve, YouTube Preset, h265
  &lt;/a&gt;
  &lt;a href=&#34;images/Resolve - Master - h264 - HandBrake - Fast.jpg&#34; data-sub-html=&#34;Handbrake, Fast&#34;&gt;
  	&lt;img src=&#34;images/Resolve - Master - h264 - HandBrake - Fast.jpg&#34; width=&#34;100%&#34;&gt;
  	Handbrake, Fast
  &lt;/a&gt;
  &lt;a href=&#34;images/Resolve - Master - h264 - HandBrake - VeryFast.jpg&#34; data-sub-html=&#34;Handbrake, Very Fast&#34;&gt;
  	&lt;img src=&#34;images/Resolve - Master - h264 - HandBrake - VeryFast.jpg&#34; width=&#34;100%&#34;&gt;
  	Handbrake, Very Fast
  &lt;/a&gt;
  &lt;a href=&#34;images/Resolve - Master - h264 - HandBrake - HQ.jpg&#34; data-sub-html=&#34;Handbrake, High Quality&#34;&gt;
  	&lt;img src=&#34;images/Resolve - Master - h264 - HandBrake - HQ.jpg&#34; width=&#34;100%&#34;&gt;
  	Handbrake, High Quality
  &lt;/a&gt;
  &lt;a href=&#34;images/Resolve - Master - h264 - HandBrake - Super HQ.jpg&#34; data-sub-html=&#34;Handbrake, Super High Quality&#34;&gt;
  	&lt;img src=&#34;images/Resolve - Master - h264 - HandBrake - Super HQ.jpg&#34; width=&#34;100%&#34;&gt;
  	Handbrake, Super High Quality
  &lt;/a&gt;
  &lt;a href=&#34;images/Resolve - Master - h264.jpg&#34; data-sub-html=&#34;Davinci Resolve, Master - h264&#34;&gt;
  	&lt;img src=&#34;images/Resolve - Master - h264.jpg&#34; width=&#34;100%&#34;&gt;
  	Davinci Resolve, Master - h264
  &lt;/a&gt;
  &lt;a href=&#34;images/Resolve - Master - h265.jpg&#34; data-sub-html=&#34;Davinci Resolve, Master - h265&#34;&gt;
  	&lt;img src=&#34;images/Resolve - Master - h265.jpg&#34; width=&#34;100%&#34;&gt;
  	Davinci Resolve, Master - h265
  &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;In these very specific examples, you can immediately see that the DaVinci Resolve YouTube presets are not good. The h264 version shows artifiacts on the right side of the frame and all detail in the snow on the ground is completely lost. Interestingly, the h265 codec doesn&amp;rsquo;t lose as much detail, and is slightly smaller. In the case were you need a small file, it seems like the h265 does a better job at these lower bitrates.&lt;/p&gt;
&lt;p&gt;When we jump up into the Handbrake re-encodes, things get noticeably better. Honestly, from the still frames it&amp;rsquo;s very hard (for me) to tell the difference between these images, all the way through to the masters. Even when I watch the playback of the videos themselves, I&amp;rsquo;m hard pressed to see any difference. It could be that the source clips themselves only have a 120Mbps bitrate, and we&amp;rsquo;re re-encoding at a higher bitrate for the masters (474Mbps).&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;To really judge this fairly, I probably should have rendered everything out from DaVinci Resolve and manually adjusted the bitrate. Based on these tests, though, I&amp;rsquo;m not seeing a noticeable loss in quality between the 474Mbps best quality from Resolve and a re-encoded to 78Mbps in Handbrake. For the time being, I&amp;rsquo;m planning to render out from Resolve and limiting my bitrate to 80Mbps. That&amp;rsquo;s only 590 MB or so per minute of video, which isn&amp;rsquo;t bad for what I&amp;rsquo;m doing with them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build a Large Language Model From Scratch</title>
      <link>https://brettgfitzgerald.com/posts/build-a-large-language-model/</link>
      <pubDate>Thu, 06 Feb 2025 12:57:27 -0500</pubDate>
      <guid>https://brettgfitzgerald.com/posts/build-a-large-language-model/</guid>
      <description>&lt;h2 id=&#34;building-a-large-language-model-from-scratch&#34;&gt;Building a large language model from scratch&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m a machine learning / A.I. hobbyist. The technologies fascinate me, and I can&amp;rsquo;t seem to learn enough about them. Sebastian Raschka&amp;rsquo;s book, Build a Large Language Model (From Scratch) caught my eye. I don&amp;rsquo;t recall how I stumbled on it, but I found it when it was still in early access from Manning Publications. I purchased it, and started working through it as the final chapters were being written and released. I just completed the book and all the included work and loved every minute of it.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Build a Large Language Model From Scratch by Sebastian Raschka&#34; loading=&#34;lazy&#34; src=&#34;https://brettgfitzgerald.com/posts/build-a-large-language-model/llm-book.jpg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;my-approach&#34;&gt;My approach&lt;/h2&gt;
&lt;p&gt;A while ago, I read some advice about learning programming from digital books and tutorials. The advice was to never copy and paste code from samples but to hand-type all the code. I took that approach with this book. I typed every single line of code (except for a couple of blocks which were highly repetitive and long). You can see all my work here: &lt;a href=&#34;https://github.com/controversy187/build-a-large-language-model&#34;&gt;https://github.com/controversy187/build-a-large-language-model&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I did my best to work in section chunks. I didn&amp;rsquo;t want to start a section unless I had the time dedicated to completing it. Some sections are pretty short, others are fairly involved and time-consuming.&lt;/p&gt;
&lt;p&gt;I built this in Jupyter Notebooks on my laptop, which is pretty underpowered for this type of work. The premise of the book was that you can build an LLM on consumer hardware, and it can perform decently well. As I&amp;rsquo;m writing this, I&amp;rsquo;m currently fine-tuning my model locally. My model is about 50 steps into a 230-step tuning, and I just crossed the 20-minute execution time mark. The earlier code samples ran quicker, but the last few sections used larger models, which slowed things down considerably.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t do most of the supplemental exercises. I tend to have an &amp;ldquo;I want to do ALL THE THINGS!&amp;rdquo; personality. The drawback is that if I take the time to do all the things, I eventually get long-term distracted and never actually finish what I started. So I sort of rushed through this book. I even took several weeks off around Christmas and New Year&amp;rsquo;s. But I got back into it and powered through the last few chapters.&lt;/p&gt;
&lt;p&gt;So, more or less, I read through the chapters and wrote all the mandatory coding assignments.&lt;/p&gt;
&lt;h2 id=&#34;learnings&#34;&gt;Learnings&lt;/h2&gt;
&lt;p&gt;What can I tell you about large language models? A lot more than I could before I started this book, but certainly not all the things the author attempted to teach me. I&amp;rsquo;ll summarize my understanding, but I could be wrong about some of these things, and I most certainly forgot or misunderstood others.&lt;/p&gt;
&lt;h3 id=&#34;tokenization--vocabulary&#34;&gt;Tokenization &amp;amp; Vocabulary&lt;/h3&gt;
&lt;p&gt;A large language model starts its life by building a vocabulary of text. A massive amount of text is distilled down into a list of unique words. Each word is then translated into an integer because computers like numbers more than they like words. This process is referred to as &amp;ldquo;tokenization&amp;rdquo;, where the word is replaced with a numerical token. So now we have a list of unique tokens, which is the vocabulary of the large language model.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Build a more advanced tokenizer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, world. Is this-- a test?&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;([,.:;?_!&amp;#34;()&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]|--|\s)&amp;#39;&lt;/span&gt;, text)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; result &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(result)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Outputs &amp;#34;[&amp;#39;Hello&amp;#39;, &amp;#39;,&amp;#39;, &amp;#39;world&amp;#39;, &amp;#39;.&amp;#39;, &amp;#39;Is&amp;#39;, &amp;#39;this&amp;#39;, &amp;#39;--&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;test&amp;#39;, &amp;#39;?&amp;#39;]&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;all_words &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sorted(set(result))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vocab_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(all_words)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(vocab_size)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Outputs 10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Display the first 51 tokens in our vocabulary.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vocab &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {token:integer &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; integer,token &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(all_words)}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(vocab&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(item)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Outputs:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Is&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;this&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;world&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In this example, the id 9 represents the word &amp;#34;world&amp;#34;. 5 represents &amp;#34;Is&amp;#34;. etc.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is where my understanding gets fuzzy. We didn&amp;rsquo;t get very far before that happened, &amp;rsquo;eh? Now, we take that massive amount of text we were using earlier to create the vocabulary (or a subset, or totally different text), and we tokenize the entire text. We do this by using the vocabulary we built previously and substituting the words in the training text for their equivalent token value. This is now our training text.&lt;/p&gt;
&lt;h3 id=&#34;model-training--relationships&#34;&gt;Model Training &amp;amp; Relationships&lt;/h3&gt;
&lt;p&gt;With that complete, we can &amp;ldquo;train&amp;rdquo; the model. This process involves taking each token in the vocabulary and building a relationship to each other token in the vocabulary, based on those tokens&amp;rsquo; relative positions to each other in the training text. So if the word &amp;ldquo;cat&amp;rdquo; is followed by the word &amp;ldquo;jump&amp;rdquo;, the model records that relationship. But it also records the relationship of the word &amp;ldquo;cat&amp;rdquo; to other words in the text. So &amp;ldquo;jump&amp;rdquo; follows &amp;ldquo;cat&amp;rdquo;, but maybe it does so more frequently when they are close to the word &amp;ldquo;mouse&amp;rdquo;. And maybe less frequently when they are close to the word &amp;ldquo;nap&amp;rdquo;. Recording ALL these relationships would require a massive dataset, so the relationships are mathematically reduced and approximated. There are definitely more technical terms to use, and the book went into them. I definitely forget them, though.&lt;/p&gt;
&lt;h3 id=&#34;text-generation-process&#34;&gt;Text Generation Process&lt;/h3&gt;
&lt;p&gt;Now, if you provide a starter text to the model, it will try to complete the text for you. Continuing our example, if I gave the model the text &amp;ldquo;My cat saw a mouse and it&amp;rdquo;, based on the word cat being close to the word mouse, it might predict the word &amp;ldquo;jumped&amp;rdquo; to come next. So it appends the word &amp;ldquo;jumped&amp;rdquo; to the text I submitted, and then it takes that whole new sentence and feeds it back into itself. So now the input text is &amp;ldquo;My cat saw a mouse and it jumped&amp;rdquo;. The next output word could be &amp;ldquo;on&amp;rdquo;, so it appends that word and feeds this concatenated output back into its input.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;Every time it does a loop like this, it tokenizes the entire input (or up to a limit, known as a context limit or context window) and then calculates the most likely next token, then converts it all back to text for us to read.&lt;/del&gt; &lt;em&gt;&lt;a href=&#34;#update-2025-02-17&#34;&gt;See update&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;model-weights--distribution&#34;&gt;Model Weights &amp;amp; Distribution&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;Saving all those relationships between the tokens are known as the &amp;ldquo;weights&amp;rdquo; of the model.&lt;/del&gt; &lt;em&gt;&lt;a href=&#34;#update-2025-02-17&#34;&gt;See update&lt;/a&gt;&lt;/em&gt; Those can be distributed, so if you train a model on a given training text, you can give that to your friends and they can use those model weights to predict text similar to that training text.&lt;/p&gt;
&lt;h3 id=&#34;fine-tuning&#34;&gt;Fine Tuning&lt;/h3&gt;
&lt;p&gt;Fine-tuning is the process of training a model for specific&amp;hellip; things. My mind is getting fuzzier here, so I&amp;rsquo;m not going to go into this deeper. Suffice it to say, that you start with a base language model and continue to train it using specific input and output pairs. In the book, we built a spam classifier that determined if a given message was spam or not, as well as a model that will follow instructions. That&amp;rsquo;s actually the one that&amp;rsquo;s being trained right now as I write this post, so I&amp;rsquo;m not sure how it will turn out. Based on the fact that it&amp;rsquo;s published in a book, I think it will come out just fine.&lt;/p&gt;
&lt;p&gt;So while I&amp;rsquo;m not completely done with the book, I&amp;rsquo;m very nearly there. I did learn a lot of great concepts, although obviously some of them weren&amp;rsquo;t retained. It would probably behoove me to go back through the book again and quickly breeze through it, in order to refresh my memory and cement my learnings.&lt;/p&gt;
&lt;h2 id=&#34;meta-learnings&#34;&gt;Meta learnings&lt;/h2&gt;
&lt;p&gt;Other than the technical aspects of Large Language Models, what else did I learn through this experience?&lt;/p&gt;
&lt;p&gt;Through my experiment with typing all the code samples by hand, I can say that my time would have been better spent with a different approach. If I do this again, I&amp;rsquo;ll probably not type all the code snippets, but rather &amp;ldquo;type&amp;rdquo; them in my mind, and really understand what each line does. The times I learned the most were actually when I made a typo and had to go back through my code to debug it. That forced me to understand what was happening so I could figure out what went wrong.&lt;/p&gt;
&lt;p&gt;I learn better with paper, rather than a digital book. I don&amp;rsquo;t know why. I had both available to me, and I read the first couple of chapters in the paper book. That information stuck better. Maybe because it was earlier in the book and simpler to understand, or maybe the format played into it. But I enjoyed it better, regardless.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t have to &amp;ldquo;figure out&amp;rdquo; anything, and I think that hampered my learning. There are supplemental exercises in the book, where the author gives you a problem and you have to figure out how to solve it. The answers are given in his GitHub repository. That would have slowed me down a lot, but I&amp;rsquo;m very confident that I would have learned the material better.&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m torn right now. I want to understand this material better, but I wonder if getting into lower-level, specific material might help me understand AI and machine learning better. What will likely happen is that I&amp;rsquo;ll copy and paste this content into Claude.ai and suggest a path forward for me.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;update-2025-02-17&#34;&gt;Update: 2025-02-17&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/in/sebastianraschka/&#34;&gt;Sebastian Raschka&lt;/a&gt; sent me a kind message in response to this post and clarified some of my thinking. To quote him:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&amp;ldquo;Every time it does a loop like this, it tokenizes the entire input (or up to a limit, known as a context limit or context window)&amp;rdquo;. You do this initially when you parse the input text. But then you technically don&amp;rsquo;t need to re-tokenize anything. You can leave the generated output in the tokenized form when creating the next token.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What I mean is if the text is&lt;/p&gt;
&lt;p&gt;&amp;ldquo;My cat saw a mouse&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The tokens might be &amp;ldquo;123 1 5 6 99&amp;rdquo; (numbers are arbitrary examples). Then the LLM generates the token 801 for &amp;ldquo;jump&amp;rdquo;. Then you simply use &amp;ldquo;123 1 5 6 99 801&amp;rdquo; as the input for the next word.&lt;/p&gt;
&lt;p&gt;When you show the output to the user, then you convert back into text.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&amp;ldquo;Saving all those relationships between the tokens are known as the “weights” of the model.&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I would say that relationships between tokens are the attention scores. The model weights are more like values that are involved in computing things like the attention scores (and other things).&lt;/p&gt;
&lt;p&gt;Now that you finished the book, in case you are bored, I do also have some more materials as bonus material in the GitHub repository.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d say the GPT-&amp;gt;Llama conversion (&lt;a href=&#34;https://github.com/rasbt/LLMs-from-scratch/tree/main/ch05/07_gpt_to_llama&#34;&gt;https://github.com/rasbt/LLMs-from-scratch/tree/main/ch05/07_gpt_to_llama&lt;/a&gt;) and the DPO preference tuning (&lt;a href=&#34;https://github.com/rasbt/LLMs-from-scratch/blob/main/ch07/04_preference-tuning-with-dpo/dpo-from-scratch.ipynb&#34;&gt;https://github.com/rasbt/LLMs-from-scratch/blob/main/ch07/04_preference-tuning-with-dpo/dpo-from-scratch.ipynb&lt;/a&gt;) are maybe the most interesting ones.&lt;/p&gt;
&lt;p&gt;I also just uploaded some PyTorch tips for increasing the training speed of the model: &lt;a href=&#34;https://github.com/rasbt/LLMs-from-scratch/tree/main/ch05/10_llm-training-speed&#34;&gt;https://github.com/rasbt/LLMs-from-scratch/tree/main/ch05/10_llm-training-speed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These materials are less polished than the book itself, but maybe you&amp;rsquo;ll still find them useful!&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>New Blog</title>
      <link>https://brettgfitzgerald.com/posts/new-blog/</link>
      <pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://brettgfitzgerald.com/posts/new-blog/</guid>
      <description>&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;
&lt;p&gt;Does the internet need another blog? Definitively, no. Do I have original insights that you will benefit from reading? Most likely not. So what&amp;rsquo;s the point of this blog?&lt;/p&gt;
&lt;p&gt;I recently changed jobs, and I&amp;rsquo;m learning a lot. I retain information better when I describe it to someone. I also have a fear that if I constantly regurgitate my ongoing education to my close family, they will eventually want to murder me. That&amp;rsquo;s where this blog comes in. I&amp;rsquo;m going to teach you what I&amp;rsquo;m learning, so I can learn it better.&lt;/p&gt;
&lt;p&gt;Inevitably, I&amp;rsquo;ll forget about this blog. Posts will become less frequent, and then stop completely. At some point, I&amp;rsquo;ll just stop writing here completely. After a while, I&amp;rsquo;ll find a new use for my domain name, and this will cease to exist, except in the ever growing dataset of archive.org. So, let&amp;rsquo;s get on with it!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>